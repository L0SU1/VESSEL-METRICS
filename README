# Synthetic Recursive 3D Vessel Tree

This *.ipynb* provides a Python framework to generate, discretize, and visualize **synthetic 3D vascular trees** using recursive bifurcation and tortuous segments. The generated data are exported as a NIfTI file for further analysis in medical imaging or computational modeling.

---

## Table of Contents

1. [Overview](#overview)  
2. [Installation](#installation)  
3. [Key Functions](#key-functions)  
4. [Hyperparameters](#hyperparameters)  


---

## Overview

The script simulates 3D vascular trees with:

- Recursive bifurcations controlled by depth and number of children.
- Tortuous segments generated by small random deviations.
- Adjustable vessel diameters and lengths per branching level.
- Discretization into a 3D voxel mask suitable for imaging and analysis.

The main workflow:

1. Generate recursive vessel segments in 3D space.
2. Convert segments into a voxel-based binary mask.
3. Export the mask as a NIfTI file.
4. Visualize the 3D tree structure with Matplotlib.

---

## Installation

### Required packages:

pip install numpy matplotlib nibabel


## Key Functions

### `rotate_vector(v, axis, angle)`

Rotates a vector `v` around a given `axis` by a specified `angle` (in radians) using **Rodriguesâ€™ rotation formula**.

**Inputs**:
- `v`: 3D vector  
- `axis`: Axis of rotation  
- `angle`: Rotation angle (radians)  

**Output**: Rotated vector (3D)

---

### `generate_tortuous_segment(start_point, direction, length, n_points, tortuosity_dist)`

Generates a **single 3D vessel segment** with tortuosity.

**Inputs**:
- `start_point`: Starting 3D coordinate  
- `direction`: Initial direction vector  
- `length`: Segment length  
- `n_points`: Number of discretization points  
- `tortuosity_dist`: Callable returning a random rotation angle  

**Output**: List of 3D points along the segment

---

### `segments_from_points(points, diameter)`

Converts a list of 3D points into **segment data** including diameters.

**Output Format**: `[x0, y0, z0, x1, y1, z1, diameter]`

---

### `create_child_directions(parent_dir, n_children, bifurcation_dist)`

Generates **directions for child branches** using a bifurcation distribution.

**Inputs**:
- `parent_dir`: Direction vector of the parent segment  
- `n_children`: Number of child branches  
- `bifurcation_dist`: Callable returning bifurcation angle  

**Output**: List of normalized child direction vectors

---

### `grow_branch(...)`

Recursively grows a vascular tree branch.

**Parameters**:
- `start_point`, `direction`, `length`, `diameter`, `depth`, `n_children`, `length_scale`, `diameter_scale`, `n_points`, `tortuosity_dist`, `bifurcation_dist`  
- `segments_list`: Stores all generated segments

---

### `assemble_vessel_tree(...)`

Builds a complete vascular tree by invoking `grow_branch`.

**Key Hyperparameters**:
- `n_points`: Points per segment  
- `n_children`: Number of children per bifurcation  
- `branching_depth`: Maximum recursion depth  
- `tortuosity_dist`: Function/Distribution controlling segment tortuosity  
- `bifurcation_dist`: Function/Distribution controlling bifurcation angles  
- `length_scale`, `diameter_scale`: Scaling factors for each depth  

**Returns**: List of segments `[x0, y0, z0, x1, y1, z1, diameter]`

---

### `segments_to_mask(segments, voxel_size)`

Discretizes vessel segments into a **3D voxel mask**.

**Inputs**:
- `segments`: Output from `assemble_vessel_tree`  
- `voxel_size`: Size of a voxel in mm  

**Output**:
- Binary 3D NumPy array (`True` = vessel voxel)  
- `origin`: Minimum coordinate offset  
- `voxel_size`: Voxel size used

---

### `visualize_vessel_tree(mask, origin, voxel_size)`

Plots the 3D vascular tree using Matplotlib.

**Features**:
- Scatter plot of all vessel voxels
- Automatic bounding box and axis limits

## Hyperparameters

| Parameter                     | Description                                         | Default / Example                          |
|-------------------------------|-----------------------------------------------------|--------------------------------------------|
| `n_points`                    | Number of discretization points per segment         | 50                                         |
| `n_children`                  | Number of children per bifurcation                  | 2                                          |
| `branching_depth`             | Maximum recursive depth                             | 3                                          |
| `tortuosity_dist`             | Callable: tortuosity angle per segment (radians)    | `lambda: np.random.normal(0.3, 0.1)`       |
| `bifurcation_dist`            | Callable: bifurcation angle (radians)               | `lambda: np.random.uniform(pi/8, pi/4)`    |
| `length_scale`                | Scaling factor for segment length at each depth     | 0.7                                        |
| `diameter_scale`              | Scaling factor for vessel diameter at each depth    | 0.7                                        |
| `random_seed`                 | Seed for reproducibility                            | 42                                         |

---
